{"version":3,"sources":["pages/Home.js","pages/Category.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","categories","setCategories","useEffect","a","fetch","response","ok","json","cats","loadCategories","console","log","className","map","cat","href","strCategory","key","idCategory","src","strCategoryThumb","alt","strCategoryDescription","Category","catId","useParams","meals","setMeals","url","warn","loadMeals","meal","idMeal","strMeal","App","basename","process","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAyCeA,EAvCF,WAAO,IAAD,EACmBC,qBADnB,mBACVC,EADU,KACEC,EADF,KAiBjB,OAdAC,qBAAU,WASJF,GARgB,uCAAG,8BAAAG,EAAA,sEACEC,MAAM,0DADR,YACfC,EADe,QAETC,GAFS,gCAGAD,EAASE,OAHT,OAGbC,EAHa,OAInBP,EAAcO,EAAKR,YAJA,2CAAH,oDASlBS,MAIAT,GAIJU,QAAQC,IAAIX,GAGV,yBAAKY,UAAU,OACVZ,EAAWa,KAAK,SAAAC,GAAS,OACxB,uBAAGC,KAAI,mBAAcD,EAAIE,aAAgBC,IAAKH,EAAII,YAChD,6BACE,4BAAKJ,EAAIE,aACT,yBAAKG,IAAKL,EAAIM,iBAAkBC,IAAKP,EAAIE,cACzC,2BAAIF,EAAIQ,+BAZX,2C,OCyBIC,G,MAzCE,WAAO,IACfC,EAASC,cAATD,MADc,EAEKzB,qBAFL,mBAEd2B,EAFc,KAEPC,EAFO,KAsBrB,OAlBAzB,qBAAU,WAaJwB,GAZW,uCAAG,gCAAAvB,EAAA,6DACVyB,EADU,+DACoDJ,GADpD,SAEOpB,MAAMwB,GAFb,YAEVvB,EAFU,QAGJC,GAHI,iCAIKD,EAASE,OAJd,OAIRC,EAJQ,OAKdmB,EAASnB,EAAKkB,OALA,wBAQdhB,QAAQmB,KAAK,aAAcxB,GARb,4CAAH,oDAabyB,MAIAJ,GAGJhB,QAAQC,IAAIe,GAEX,yBAAKd,UAAU,OACZc,EAAMb,KAAI,SAAAkB,GACX,OAEI,yBAAKd,IAAKc,EAAKC,QACd,4BAAKD,EAAKE,eATT,uCAAaT,EAAb,S,QCFIU,EAfH,WAEV,OACA,kBAAC,IAAD,CAAQC,SAAQ,UAAKC,uBAAL,MACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,oBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,UCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.257899b1.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nconst Home = () => {\n  const [categories, setCategories] = useState();\n\n  useEffect(() => {\n    const loadCategories = async () => {\n      const response = await fetch('https://www.themealdb.com/api/json/v1/1/categories.php');\n      if(response.ok) {\n        const cats = await response.json();\n        setCategories(cats.categories);\n      }\n    };\n\n    if(!categories) {\n      loadCategories();\n    }\n  })\n\n  if(!categories) {\n    return <h4>Loading...</h4>;\n  }\n\n  console.log(categories);\n\n  return (\n    <div className=\"App\">\n        {categories.map( cat => { return (\n          <a href={`Category/${cat.strCategory}`}  key={cat.idCategory}>\n            <div>\n              <h4>{cat.strCategory}</h4>\n              <img src={cat.strCategoryThumb} alt={cat.strCategory} />\n              <p>{cat.strCategoryDescription}</p>\n            </div>\n          </a>\n        );\n        })}\n    </div>\n  );\n};\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../App.css';\n\nconst Category = () => {\n  const {catId} = useParams();\n  const [meals, setMeals] = useState();\n\n  useEffect(() => {\n    const loadMeals = async () => {\n      const url = `https://www.themealdb.com/api/json/v1/1/filter.php?c=${catId}`;\n      const response = await fetch(url);\n      if(response.ok) {\n        const cats = await response.json();\n        setMeals(cats.meals);\n      }\n      else {\n        console.warn('bad stuffs', response);\n      }\n    };\n\n    if(!meals) {\n      loadMeals();\n    }\n  })\n\n  if(!meals) {\n    return <h4>Loading {catId}...</h4>;\n  }\n  console.log(meals)\n return (\n   <div className=\"App\">\n     {meals.map(meal => {\n     return (\n       (\n         <div key={meal.idMeal}>\n          <h4>{meal.strMeal}</h4>\n         </div>\n       )\n     )\n   })}\n  </div>\n ) \n}\n\nexport default Category;","import React from 'react';\nimport Home from './pages/Home';\nimport Category from './pages/Category';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\n\nconst App = () => {\n\n  return (\n  <Router basename={`${process.env.PUBLIC_URL}/`}>\n    <Switch>\n      <Route path=\"/category/:catId\">\n        <Category />\n      </Route>\n      <Route>\n        <Home />\n      </Route>\n    </Switch>\n  </Router>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}