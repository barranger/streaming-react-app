{"version":3,"sources":["pages/Home.js","pages/Category.js","pages/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","categories","setCategories","useEffect","a","fetch","response","ok","json","cats","loadCategories","console","log","className","map","cat","class","to","strCategory","key","idCategory","src","strCategoryThumb","alt","strCategoryDescription","Meal","catId","useParams","meals","setMeals","url","warn","loadMeals","meal","idMeal","strMeal","strMealThumb","strMealDescription","Recipe","mealId","setMeal","data","loadMeal","ingredients","i","push","text","measure","strArea","ing","strInstructions","split","filter","trim","line","index","App","basename","process","path","Category","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAiDeA,EA9CF,WAAO,IAAD,EACmBC,qBADnB,mBACVC,EADU,KACEC,EADF,KAiBjB,OAdAC,qBAAU,WASJF,GARgB,uCAAG,8BAAAG,EAAA,sEACEC,MAAM,0DADR,YACfC,EADe,QAETC,GAFS,gCAGAD,EAASE,OAHT,OAGbC,EAHa,OAInBP,EAAcO,EAAKR,YAJA,2CAAH,oDASlBS,MAIAT,GAIJU,QAAQC,IAAIX,GAGV,oCACA,0CACA,yBAAKY,UAAU,cACVZ,EAAWa,KAAK,SAAAC,GAAS,OAExB,yBAAKC,MAAM,YACT,kBAAC,IAAD,CAAMC,GAAE,oBAAeF,EAAIG,aAAgBC,IAAKJ,EAAIK,YAClD,oCACA,4BAAKL,EAAIG,aACT,yBAAKG,IAAKN,EAAIO,iBAAkBC,IAAKR,EAAIG,cACzC,2BAAIH,EAAIS,iCAhBX,2C,OCgCIC,G,MAjDF,WAAO,IACXC,EAASC,cAATD,MADU,EAES1B,qBAFT,mBAEV4B,EAFU,KAEHC,EAFG,KAsBjB,OAlBA1B,qBAAU,WAaJyB,GAZW,uCAAG,gCAAAxB,EAAA,6DACV0B,EADU,+DACoDJ,GADpD,SAEOrB,MAAMyB,GAFb,YAEVxB,EAFU,QAGJC,GAHI,iCAIMD,EAASE,OAJf,OAIRoB,EAJQ,OAKdC,EAASD,EAAMA,OALD,wBAQdjB,QAAQoB,KAAK,aAAczB,GARb,4CAAH,oDAab0B,MAIAJ,GAGJjB,QAAQC,IAAIgB,GAEX,oCACA,uCACA,yBAAKf,UAAU,cACZe,EAAMd,KAAI,SAAAmB,GACX,OAGG,yBAAKpB,UAAU,YACb,kBAAC,IAAD,CAAMI,GAAE,kBAAagB,EAAKC,QAAWf,IAAKc,EAAKC,QAC7C,4BAAKD,EAAKE,SACV,yBAAKd,IAAKY,EAAKG,aAAcb,IAAKU,EAAKE,UACvC,2BAAIF,EAAKI,4BAfV,uCAAaX,EAAb,SCwCIY,EAhEA,WAAO,IACbC,EAAUZ,cAAVY,OADY,EAGKvC,qBAHL,mBAGZiC,EAHY,KAGNO,EAHM,KAuBnB,GAlBArC,qBAAU,WAaJ8B,GAZU,uCAAG,gCAAA7B,EAAA,6DACT0B,EADS,+DACqDS,GADrD,SAEQlC,MAAMyB,GAFd,YAETxB,EAFS,QAGHC,GAHG,iCAIMD,EAASE,OAJf,OAIPiC,EAJO,OAKbD,EAAQC,EAAKb,MAAM,IALN,wBAQbjB,QAAQoB,KAAK,aAAczB,GARd,4CAAH,oDAaZoC,OAIAT,EACF,OAAO,2CAETtB,QAAQC,IAAIqB,GAIZ,IAFA,IAAMU,EAAc,GAEZC,EAAI,EAAGA,GAAK,GAAIA,IACnBX,EAAK,gBAAD,OAAiBW,KACtBD,EAAYE,KAAK,CACfC,KAAMb,EAAK,gBAAD,OAAiBW,IAC3BG,QAASd,EAAK,aAAD,OAAcW,MAOjC,OACE,yBAAK/B,UAAU,UACb,4BAAKoB,EAAKE,SACV,4BAAKF,EAAKf,YAAV,MAA0Be,EAAKe,SAC/B,yBAAKnC,UAAU,UACb,yBAAKA,UAAU,eACb,2CACC8B,EAAY7B,KAAI,SAAAmC,GAAG,OAAI,2BAAIA,EAAIF,QAAR,IAAkBE,EAAIH,UAEhD,yBAAKzB,IAAKY,EAAKG,aAAcb,IAAKU,EAAKE,WAEzC,4CACA,yBAAKtB,UAAU,gBACb,4BACDoB,EAAKiB,gBAAgBC,MAAM,MAAMC,QAAO,SAAAR,GAAO,OAAOA,EAAES,UAASvC,KAAI,SAACwC,EAAMC,GAAP,OACpE,4BAAKD,UC7BEE,EAlBH,WAEV,OACA,kBAAC,IAAD,CAAQC,SAAQ,UAAKC,uBAAL,MACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,oBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,mBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,UCZYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.437de986.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  const [categories, setCategories] = useState();\n\n  useEffect(() => {\n    const loadCategories = async () => {\n      const response = await fetch('https://www.themealdb.com/api/json/v1/1/categories.php');\n      if(response.ok) {\n        const cats = await response.json();\n        setCategories(cats.categories);\n      }\n    };\n\n    if(!categories) {\n      loadCategories();\n    }\n  })\n\n  if(!categories) {\n    return <h4>Loading...</h4>;\n  }\n\n  console.log(categories);\n\n  return (\n    <>\n    <h2>Categories</h2>\n    <div className=\"categories\">\n        {categories.map( cat => { return (\n          \n          <div class=\"category\">\n            <Link to={`/Category/${cat.strCategory}`}  key={cat.idCategory}>\n              <>\n              <h4>{cat.strCategory}</h4>\n              <img src={cat.strCategoryThumb} alt={cat.strCategory} />\n              <p>{cat.strCategoryDescription}</p>\n              </>\n            </Link>\n          </div>\n          \n        );\n        })}\n    </div>\n    </>\n  );\n};\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport '../App.css';\n\nconst Meal = () => {\n  const {catId} = useParams();\n  const [meals, setMeals] = useState();\n\n  useEffect(() => {\n    const loadMeals = async () => {\n      const url = `https://www.themealdb.com/api/json/v1/1/filter.php?c=${catId}`;\n      const response = await fetch(url);\n      if(response.ok) {\n        const meals = await response.json();\n        setMeals(meals.meals);\n      }\n      else {\n        console.warn('bad stuffs', response);\n      }\n    };\n\n    if(!meals) {\n      loadMeals();\n    }\n  })\n\n  if(!meals) {\n    return <h4>Loading {catId}...</h4>;\n  }\n  console.log(meals)\n return (\n   <>\n   <h4>Recipes</h4>\n   <div className=\"categories\">\n     {meals.map(meal => {\n     return (\n       (\n        \n        <div className=\"category\">\n          <Link to={`/Recipe/${meal.idMeal}`}  key={meal.idMeal}>\n            <h4>{meal.strMeal}</h4>\n            <img src={meal.strMealThumb} alt={meal.strMeal} />\n            <p>{meal.strMealDescription}</p>\n          </Link>\n        </div>\n       )\n     )\n   })}\n  </div>\n  </>\n ) \n}\n\nexport default Meal;","import React, {useEffect, useState} from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Recipe = () => {\n  const {mealId} = useParams();\n\n  const [meal, setMeal] = useState();\n\n  useEffect(() => {\n    const loadMeal = async () => {\n      const url = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealId}`;\n      const response = await fetch(url);\n      if(response.ok) {\n        const data = await response.json();\n        setMeal(data.meals[0]);\n      }\n      else {\n        console.warn('bad stuffs', response);\n      }\n    };\n\n    if(!meal) {\n      loadMeal();\n    }\n  });\n\n  if(!meal) {\n    return <h4>Loading ...</h4>;\n  }\n  console.log(meal);\n\n  const ingredients = [];\n\n  for(var i = 1; i <= 20; i++) {\n    if(meal[`strIngredient${i}`]) {\n      ingredients.push({\n        text: meal[`strIngredient${i}`],\n        measure: meal[`strMeasure${i}`]\n      });\n    }\n  }\n\n\n\n  return (\n    <div className=\"recipe\">\n      <h2>{meal.strMeal}</h2>\n      <h4>{meal.strCategory} - {meal.strArea}</h4>\n      <div className=\"topBar\">\n        <div className=\"ingredients\">\n          <h4>Ingredients</h4>\n          {ingredients.map(ing => <p>{ing.measure} {ing.text}</p>)}\n        </div>\n        <img src={meal.strMealThumb} alt={meal.strMeal} />\n      </div>\n      <h4>Instructions</h4>\n      <div className=\"instructions\">\n        <ol>\n      {meal.strInstructions.split('\\n').filter(i => { return i.trim()}).map((line, index) => \n        <li>{line}</li>)}\n        </ol>\n      </div>\n      \n    </div>\n  )\n};\n\nexport default Recipe;\n","import React from 'react';\nimport Home from './pages/Home';\nimport Category from './pages/Category';\nimport Recipe from './pages/Recipe';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\n\nconst App = () => {\n\n  return (\n  <Router basename={`${process.env.PUBLIC_URL}/`}>\n    <Switch>\n      <Route path=\"/category/:catId\">\n        <Category />\n      </Route>\n      <Route path=\"/recipe/:mealId\">\n        <Recipe />\n      </Route>\n      <Route>\n        <Home />\n      </Route>\n    </Switch>\n  </Router>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}